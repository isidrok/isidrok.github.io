---
import Layout from "@layout/layout.astro";
import Separator from "@components/separator.astro";
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await render(post);

// Construct canonical URL using site's base URL and post ID
const canonicalURL = new URL(`/blog/${post.id}`, Astro.site).href;
---

<Layout
  title={post.data.title}
  description={post.data.description}
  type="article"
  canonicalURL={canonicalURL}
>
  <article>
    <header class="intro">
      <time datetime={post.data.date.toISOString()}>
        {
          new Intl.DateTimeFormat("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          }).format(post.data.date)
        }
      </time>
      <h1>{post.data.title}</h1>
      <p class="description">{post.data.description}</p>
      {
        post.data.repository && (
          <p class="repository">
            <a
              href={post.data.repository}
              target="_blank"
              rel="noopener noreferrer"
            >
              View source code
            </a>
          </p>
        )
      }
      <Separator />
    </header>
    <div>
      <Content />
    </div>
  </article>
</Layout>

<style lang="scss">
  .intro {
    text-align: center;
    padding-top: 2rem;

    .repository {
      font-size: 0.9rem;
      color: var(--color-fg-secondary);
      margin-block: 1rem;

      a {
        color: inherit;
        text-decoration: underline;
        text-underline-offset: 0.2em;

        &:hover {
          color: var(--color-fg-primary);
        }
      }
    }
  }
</style>
